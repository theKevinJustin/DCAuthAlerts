<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.DC.Kerberos.KDC.Authentications</ID>
      <Version>1.0.0.1</Version>
    </Identity>
    <Name>Proactive DC Kerberos KDC Authentications</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWA6D">
        <ID>Microsoft.Windows.ActiveDirectoryCertificateServices.2016.Discovery</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.Report.MS.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:45</Start>
                        <End>05:05</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.Report.MS.Script.Rule.Datasource.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.Report.MS.Script.Rule.Datasource.v1001.ps1"
$EventID = "700"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "Kdcsvc" | ? { $_.EventID -eq "5823" }).Message
$Alert39 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 39" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert40 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 40" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert41 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 41" | ? { $_.TimeRaised -gt $Time } ).Parameters
$OSKerberos = $(get-scomalert -name "Proactive Server Kerberos Security Event Log" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert39.Count + $Alert40.Count + $Alert41.Count + $OSKerberos.Count
$Test

$Denied39 = @()
$Denied40 = @()
$Offenders41 = @()
$OffendersOS = @()

#=======================================
# From DC for 39 EventID

if ( $Alert39.Count -gt 0 )
{
	foreach ($LLine in $Alert39)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied39 += $LLineSplit2[0]
		}
	}

#$Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied39 = $Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied39 = $Denied39 | sort -uniq | out-string

$Denied39
}


#=======================================
# From DC for 40 EventID

if ( $Alert40.Count -gt 0 )
{
	foreach ($LLine in $Alert40)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied40 += $LLineSplit2[0]
		}
	}

#$Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40 | sort -uniq | out-string

$Denied40
}


#=======================================
# From DC for 41 EventID

if ( $Alert41.Count -gt 0 )
{
	foreach ($LLine in $Alert41)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders41 += $LLineSplit2[0]
		}
	}

#$Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41 | sort -uniq | out-string

$Offenders41
}


#=======================================
# From DC for 5830 EventID

if ( $OSKerberos.Count -gt 0 )
{
	foreach ($LLine in $OSKerberos)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$OffendersOS += $LLineSplit2[0]
		}
	}

#$OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS | sort -uniq | out-string

$OffendersOS
}




#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += $Message
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "Alert Count = $Test "
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# Denied Kerberos Sessions - Event ID's 39 and 40 "
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Denied39
$DCKDCAuthMessage += $Denied40
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# Allowed Kerberos sessions - Event ID's 41,OS Kerberos events"
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Offenders41
$DCKDCAuthMessage += $OffendersOS
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += ""

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCKDCAuthMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.700.Report.MS.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:50</Start>
                        <End>05:05</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.700.Report.MS.Script.Rule.Datasource.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.700.Report.MS.Script.Rule.Datasource.v1001.ps1"
$EventID = "701"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
# Proactive DC Kerberos Authentication Report Script Alert Rule Triggered
#$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 700 Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
#$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert59 = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert.Count + $Alert59.Count

#$Alert = $Alert.Parameters
$Alert = $Alert |sort -uniq | out-string
$Alert59 = $Alert59 |sort -uniq | out-string

$Alert  
$Alert59

$Alerts = $Alert + $Alert59

$Test

if ( $Test -gt "0" )
{
#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += $Message
#$DCKDCAuthMessage += ""
#$DCKDCAuthMessage += "Alert Count = $Test "
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# DC NetLogon sessions for past 24 hours"
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Alerts
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += ""

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

# Clean up DC alerts
get-scomalert -name "Proactive DC Kerberos Authentication Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert
get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCKDCAuthMessage)

}

if ( $Test -eq "0" )
{
	$Result = "GOOD"
    
	$DCKDCAuthMessage = @()
	$DCKDCAuthMessage += ""
	$DCKDCAuthMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCKDCAuthMessage += ""

	$DCKDCAuthMessage

	$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

	$Message = "Zero NetLogon sessions for ($date)"
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCKDCAuthMessage)

}

# Return all bags
$bag
  
#=================================================================================
# End MAIN script section

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
	  <DataSourceModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.DC.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:05</Start>
                        <End>04:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.DC.Script.Datasource.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.DC.Script.Datasource.v1001.ps1"
$EventID = "702"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

$DC =  $env:ComputerName

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message

$Alert39 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "39" } ).Message
$Alert40 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "40" } ).Message
$Alert41 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "41" } ).Message
$OSKerberos = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5830" } ).Message
$Alert31 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5831" } ).Message

$Test = $Alert39.Count + $Alert40.Count + $Alert41.Count + $OSKerberos.Count + $Alert31.Count
$Test

if ( $Test -gt 0 )
{
# Create Table for alerts

$Table = @()
$Table = $null

$Table = New-Object System.Data.DataTable "NetLogonAlerts"
$Col1 = New-Object System.Data.DataColumn Event
$Col2 = New-Object System.Data.DataColumn Count
$Col3 = New-Object System.Data.DataColumn Device
$Col4 = New-Object System.Data.DataColumn DomainController
$Table.Columns.Add($Col1)
$Table.Columns.Add($Col2)
$Table.Columns.Add($Col3)
$Table.Columns.Add($Col4)


#=======================================
# From DC for 39 EventID

$Auths27 = $Alert39
#$Auths27.Count

if ( $Alert39.Count -gt 0 )
{
	$Alerts27 = $Alert39 | sort -uniq
	foreach ($LLine in $Alerts27)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied39 += $LLineSplit2[0]
		}
	}

#$Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device27 = $Denied39

$Denied39 = $Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied39 = $Denied39 | sort -uniq | out-string

$Denied39

foreach ($Device in $Device27)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "39 alert Count =" $Auths28.Count
	$Device
	
	$AuthCount28 = $($Device27 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "39"
	$row.Count = $AuthCount27
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 40 EventID

$Auths28 = $Alert40
#$Auths28.Count

if ( $Alert40.Count -gt 0 )
{
	$Alerts28 = $Alert40 | sort -uniq
	foreach ($LLine in $Alerts28)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied40 += $LLineSplit2[0]
		}
	}

#$Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device28 = $Denied40

$Denied40 = $Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40 | sort -uniq | out-string

$Denied40

foreach ($Device in $Device28)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "40 alert Count =" $Auths28.Count
	$Device
	
	$AuthCount28 = $($Device28 | select-string -pattern $Device).Count
	$AuthCount28
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "40"
	$row.Count = $AuthCount28
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 41 EventID

$Auths29 = $Alert41
#$Auths29.Count

if ( $Alert41.Count -gt 0 )
{
	$Alerts29 = $Alert41 | sort -uniq
	#$Alerts29
	
	foreach ($LLine in $Alerts29)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders41 += $LLineSplit2[0]
		}
	}

#$Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device29 = $Offenders41

$Offenders41 = $Offenders41 | sort -uniq | out-string
$Offenders41

foreach ($Device in $Device29)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "41 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths29 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "41"
	$row.Count = $AuthCount29
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 5830 EventID

$Auths30 = $OSKerberos
#$Auths30.Count

if ( $OSKerberos.Count -gt 0 )
{
	$Alerts30 = $OSKerberos | sort -uniq
	foreach ($LLine in $Alerts30)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$OffendersOS += $LLineSplit2[0]
		}
	}

#$OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device30 = $OffendersOS

$OffendersOS = $OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS | sort -uniq | out-string

$OffendersOS

foreach ($Device in $Device30)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "5830 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths30 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "5830"
	$row.Count = $AuthCount30
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 5831 EventID

$Auths31 = $Alert31
#$Auths31.Count

if ( $Alert31.Count -gt 0 )
{
	$Alerts31 = $Alert31 | sort -uniq
	foreach ($LLine in $Alerts31)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Offenders31 += $LLineSplit2[0]
		}
	}

#$Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device31 = $Offenders31

$Offenders31 = $Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31 | sort -uniq | out-string

$Offenders31

foreach ($Device in $Device31)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "5831 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths31 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "5831"
	$row.Count = $AuthCount31
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}

#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += $Message
$DCKDCAuthMessage += "#"
$DCKDCAuthMessage += $Table
$DCKDCAuthMessage += "#"

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string


#============================================================

  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$DCKDCAuthMessage)

  # Return all bags
  $bag

# End initial loop
}

if ( $Test -eq "0" )
{
	$DCKDCAuthMessage = @()
	$DCKDCAuthMessage += ""
	$DCKDCAuthMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCKDCAuthMessage += ""

	$DCKDCAuthMessage

	$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

}

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <ConditionDetectionModuleType ID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate39ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate40ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate41ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.ConsolidateThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>

      <WriteActionModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.MS.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.MS.Script.WA.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.MS.Script.WA.v1001.ps1"
$EventID = "701"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
$Alert39 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 39" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert40 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 40" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert41 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 41" | ? { $_.TimeRaised -gt $Time } ).Parameters
$OSKerberos = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 5830" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert31 = $(get-scomalert -name "Proactive DC Kerberos Authentication - System Event ID 5831" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert39.Count + $Alert40.Count + $Alert41.Count + $OSKerberos.Count + $Alert31.Count
$Test

if ( $Test -gt "0" )
{
# Create arrays
$Denied39 = @()
$Denied40 = @()
$Offenders41 = @()
$OffendersOS = @()
$Offenders31 = @()

#=======================================
# From DC for 39 EventID

if ( $Alert39.Count -gt 0 )
{
	$Alerts27 = $Alert39 | sort -uniq
	foreach ($LLine in $Alerts27)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied39 += $LLineSplit2[0]
		}
	}

#$Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied39 = $Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied39 = $Denied39 | sort -uniq | out-string

$Denied39
}


#=======================================
# From DC for 40 EventID

if ( $Alert40.Count -gt 0 )
{
	$Alerts28 = $Alert40 | sort -uniq
	foreach ($LLine in $Alerts28)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied40 += $LLineSplit2[0]
		}
	}

#$Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40 | sort -uniq | out-string

$Denied40
}


#=======================================
# From DC for 41 EventID

if ( $Alert41.Count -gt 0 )
{
	$Alerts29 = $Alert41 | sort -uniq
	foreach ($LLine in $Alerts29)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders41 += $LLineSplit2[0]
		}
	}

#$Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41 | sort -uniq | out-string

$Offenders41
}


#=======================================
# From DC for 5830 EventID

if ( $OSKerberos.Count -gt 0 )
{
	$Alerts30 = $OSKerberos | sort -uniq
	foreach ($LLine in $Alerts30)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$OffendersOS += $LLineSplit2[0]
		}
	}

#$OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS | sort -uniq | out-string

$OffendersOS
}


#=======================================
# From DC for 5831 EventID

if ( $Alert31.Count -gt 0 )
{
	$Alerts31 = $Alert31 | sort -uniq
	foreach ($LLine in $Alerts31)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Offenders31 += $LLineSplit2[0]
		}
	}

#$Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31 | sort -uniq | out-string

$Offenders31
}

#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += $Message
#$DCKDCAuthMessage += ""
#$DCKDCAuthMessage += "Alert Count = $Test "
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# Denied NetLogon Sessions - Event ID's 39 and 40 "
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Denied39
$DCKDCAuthMessage += $Denied40
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# Allowed NetLogon sessions - Event ID's 41,5830,5831"
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Offenders41
$DCKDCAuthMessage += $OffendersOS
$DCKDCAuthMessage += $Offenders31
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += ""

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCKDCAuthMessage)


# Return all bags
$bag
}


if ( $Test -eq "0" )
{
	$DCKDCAuthMessage = @()
	$DCKDCAuthMessage += ""
	$DCKDCAuthMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCKDCAuthMessage += ""

	$DCKDCAuthMessage

	$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

}

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.MS.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.MS.Script.WA.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.MS.Script.WA.v1001.ps1"
$EventID = "701"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
# Proactive DC Kerberos Authentication Report Script Alert Rule Triggered
#$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 700 Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
#$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert = $(get-scomalert -name "Proactive DC Kerberos Authentication Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert59 = $(get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert.Count + $Alert59.Count

#$Alert = $Alert.Parameters
$Alert = $Alert |sort -uniq | out-string
$Alert59 = $Alert59 |sort -uniq | out-string

$Alert  
$Alert59

$Alerts = $Alert + $Alert59

$Test

if ( $Test -gt "0" )
{
#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += $Message
#$DCKDCAuthMessage += ""
#$DCKDCAuthMessage += "Alert Count = $Test "
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += "# DC NetLogon sessions for past 24 hours"
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += $Alerts
$DCKDCAuthMessage += "#============================================================"
$DCKDCAuthMessage += ""
$DCKDCAuthMessage += ""

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

# Clean up DC alerts
get-scomalert -name "Proactive DC Kerberos Authentication Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert
get-scomalert -name "Proactive DC Kerberos Authentication Event ID 55*" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCKDCAuthMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
}

if ( $Test -eq "0" )
{
	$DCKDCAuthMessage = @()
	$DCKDCAuthMessage += ""
	$DCKDCAuthMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCKDCAuthMessage += ""

	$DCKDCAuthMessage

	$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

}

  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Alert.WA.v1001.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC Kerberos Authentication Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Alert.WA.v1001.ps1"
$EventID = "701"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC Kerberos Authentications report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather DC Kerberos Authentication Alerts for date ($date).")
 
#===============================================
# DC Kerberos
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

$DC =  $env:ComputerName

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message

$Alert39 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "39" } ).Message
$Alert40 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "40" } ).Message
$Alert41 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "41" } ).Message
$OSKerberos = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5830" } ).Message
$Alert31 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5831" } ).Message

$Test = $Alert39.Count + $Alert40.Count + $Alert41.Count + $OSKerberos.Count + $Alert31.Count
$Test

if ($Test -gt "0" )
{
# Create arrays
$Denied39 = @()
$Denied40 = @()
$Offenders41 = @()
$OffendersOS = @()
$Offenders31 = @()

# Create Table for alerts

$Table = @()
$Table = $null

$Table = New-Object System.Data.DataTable "NetLogonAlerts"
$Col1 = New-Object System.Data.DataColumn Event
$Col2 = New-Object System.Data.DataColumn Count
$Col3 = New-Object System.Data.DataColumn Device
$Col4 = New-Object System.Data.DataColumn DomainController
$Table.Columns.Add($Col1)
$Table.Columns.Add($Col2)
$Table.Columns.Add($Col3)
$Table.Columns.Add($Col4)


#=======================================
# From DC for 39 EventID

$Auths27 = $Alert39
#$Auths27.Count

if ( $Alert39.Count -gt 0 )
{
	$Alerts27 = $Alert39 | sort -uniq
	foreach ($LLine in $Alerts27)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied39 += $LLineSplit2[0]
		}
	}

#$Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device27 = $Denied39

$Denied39 = $Denied39.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied39 = $Denied39 | sort -uniq | out-string

$Denied39

foreach ($Device in $Device27)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "39 alert Count =" $Auths28.Count
	$Device
	
	$AuthCount28 = $($Device27 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "39"
	$row.Count = $AuthCount27
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 40 EventID

$Auths28 = $Alert40
#$Auths28.Count

if ( $Alert40.Count -gt 0 )
{
	$Alerts28 = $Alert40 | sort -uniq
	foreach ($LLine in $Alerts28)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied40 += $LLineSplit2[0]
		}
	}

#$Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device28 = $Denied40

$Denied40 = $Denied40.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied40 = $Denied40 | sort -uniq | out-string

$Denied40

foreach ($Device in $Device28)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "40 alert Count =" $Auths28.Count
	$Device
	
	$AuthCount28 = $($Device28 | select-string -pattern $Device).Count
	$AuthCount28
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "40"
	$row.Count = $AuthCount28
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 41 EventID

$Auths29 = $Alert41
#$Auths29.Count

if ( $Alert41.Count -gt 0 )
{
	$Alerts29 = $Alert41 | sort -uniq
	#$Alerts29
	
	foreach ($LLine in $Alerts29)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders41 += $LLineSplit2[0]
		}
	}

#$Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders41 = $Offenders41.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device29 = $Offenders41

$Offenders41 = $Offenders41 | sort -uniq | out-string
$Offenders41

foreach ($Device in $Device29)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "41 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths29 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "41"
	$row.Count = $AuthCount29
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 5830 EventID

$Auths30 = $OSKerberos
#$Auths30.Count

if ( $OSKerberos.Count -gt 0 )
{
	$Alerts30 = $OSKerberos | sort -uniq
	foreach ($LLine in $Alerts30)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$OffendersOS += $LLineSplit2[0]
		}
	}

#$OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device30 = $OffendersOS

$OffendersOS = $OffendersOS.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$OffendersOS = $OffendersOS | sort -uniq | out-string

$OffendersOS

foreach ($Device in $Device30)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "5830 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths30 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "5830"
	$row.Count = $AuthCount30
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}


#=======================================
# From DC for 5831 EventID

$Auths31 = $Alert31
#$Auths31.Count

if ( $Alert31.Count -gt 0 )
{
	$Alerts31 = $Alert31 | sort -uniq
	foreach ($LLine in $Alerts31)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Offenders31 += $LLineSplit2[0]
		}
	}

#$Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)

$Device31 = $Offenders31

$Offenders31 = $Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31 | sort -uniq | out-string

$Offenders31

foreach ($Device in $Device31)
{
	# Identify each offender by count
	#$StartTime = Get-Date

	write-host "5831 alert Count =" $Auths29.Count
	$Device
	
	$AuthCount29 = $($Auths31 | select-string -pattern $Device).Count
	$AuthCount29
	write-host ""
	
	#$EndTime = Get-Date
	#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
	#$ScriptTime
	
	# Add to Table	
	$row = $Table.NewRow()
	$row.Event = "5831"
	$row.Count = $AuthCount31
	$row.Device = $Device
	$row.DomainController = $DC
	$Table.Rows.Add($row)
}

}

#=======================================

$DCKDCAuthMessage = @()
$DCKDCAuthMessage += $Message
$DCKDCAuthMessage += "#"
$DCKDCAuthMessage += $Table
$DCKDCAuthMessage += "#"

$DCKDCAuthMessage

$DCKDCAuthMessage = $DCKDCAuthMessage | out-string


#============================================================

  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC Kerberos for ($date). `n `n$DCKDCAuthMessage`n")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$DCKDCAuthMessage)

  # Return all bags
  $bag

# End initial loop
}

if ( $Test -eq "0" )
{
	$DCKDCAuthMessage = @()
	$DCKDCAuthMessage += ""
	$DCKDCAuthMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCKDCAuthMessage += ""

	$DCKDCAuthMessage

	$DCKDCAuthMessage = $DCKDCAuthMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

}

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Proactive.DC.System.Event.ID.39.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">39</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate39ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.System.Event.ID.39.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.System.Event.ID.40.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">40</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate40ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.System.Event.ID.40.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.System.Event.ID.41.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">41</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate41ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.System.Event.ID.41.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
			</AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

	  <Rule ID="Proactive.CA.System.Event.ID.39.Alert.Rule" Enabled="true" Target="MWA6D!Microsoft.Windows.CertificateServices.CARole.2016" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">39</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate39ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.CA.System.Event.ID.39.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.CA.System.Event.ID.40.Alert.Rule" Enabled="true" Target="MWA6D!Microsoft.Windows.CertificateServices.CARole.2016" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">40</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate40ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.CA.System.Event.ID.40.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.CA.System.Event.ID.41.Alert.Rule" Enabled="true" Target="MWA6D!Microsoft.Windows.CertificateServices.CARole.2016" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">41</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Kdcsvc</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate41ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.CA.System.Event.ID.41.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
			</AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

      <Rule ID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Microsoft-Windows-Kerberos/Operational</LogName>
            <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>The Key Distribution Center (KDC) encountered a user certificate that was valid but contained a different SID than the user to which it mapped</Pattern>
                </RegExExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.ConsolidateThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Microsoft-Windows-Kerberos/Operational</LogName>
            <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>The Key Distribution Center (KDC) encountered a user certificate that was valid but contained a different SID than the user to which it mapped</Pattern>
                </RegExExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.ConsolidateThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

	  <Rule ID="Proactive.DC.Kdcsvc.Event.ID.700.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
  				  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">700</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC Kerberos Authentications report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kdcsvc.Event.ID.700.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>			  
            </AlertParameters>
          </WriteAction>
		  <WriteAction ID="CollectEventDWDB" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData"/>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.Kdcsvc.Event.ID.701.Report.Script.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">701</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC Kerberos Authentications report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kdcsvc.Event.ID.701.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
		  <WriteAction ID="CollectEventDWDB" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData"/>		  
        </WriteActions>
      </Rule>

      <Rule ID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">701</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC Kerberos Authentications report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
	
      <Rule ID="Proactive.DC.Kerberos.KDC.Authentications.Report.Script.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.DC.Script.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kerberos.KDC.Authentications.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>	  
      <Rule ID="Proactive.DC.Kerberos.KDC.Authentications.Summary.Report.MS.Script.Alert.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.Kerberos.KDC.Authentications.Report.MS.Script.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kerberos.KDC.Authentications.Summary.Report.MS.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.Kerberos.KDC.Authentications.Summary.700.Report.MS.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.Kerberos.KDC.Authentications.700.Report.MS.Script.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.Kerberos.KDC.Authentications.Summary.700.Report.MS.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="360" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.MS.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DC.Kdcsvc.Allowed.Sessions.701.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="360" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.MS.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Task" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Alert.WA">
          <TimeoutSeconds>120</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Proactive.DC.System.Event.ID.39.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.System.Event.ID.40.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.System.Event.ID.41.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.CA.System.Event.ID.39.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.CA.System.Event.ID.40.Alert.Rule.AlertMessage" />
	  <StringResource ID="Proactive.CA.System.Event.ID.41.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kerberos.KDC.Authentications.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kdcsvc.Event.ID.700.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kdcsvc.Event.ID.701.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kerberos.KDC.Authentications.Summary.Report.MS.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.Kerberos.KDC.Authentications.Summary.700.Report.MS.Script.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications">
          <Name>Proactive DC Kerberos KDC Authentications</Name>
          <Description>
v1.0.0.1 18 Jul 2023 Updated reports to Informational
v1.0.0.0 12 May 2022 Created KDC System Events mgmt pack</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Report.MS.Script.Rule.Datasource">
          <Name>Proactive DC Kerberos Authentications Report MS Script Datasource</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.700.Report.MS.Script.Rule.Datasource">
          <Name>Proactive DC Kerberos Authentications 700 Report Script Datasource</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Alerts.Report.DC.Script.Rule.Datasource">
          <Name>Proactive DC Kerberos Authentications Report DC Script Datasource</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate39ThenMapCD">
          <Name>Proactive DC Kerberos Consolidated Event System Event ID 39</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate40ThenMapCD">
          <Name>Proactive DC Kerberos Consolidated Event System Event ID 40</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.Consolidate41ThenMapCD">
          <Name>Proactive DC Kerberos Consolidated Event System Event ID 41</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.CollectConsolidatedEvent.ConsolidateThenMapCD">
          <Name>Proactive DC Kerberos Consolidated Event System Event ID 41</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.System.Event.ID.39.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication - System Event ID 39</Name>
          <Description>Created 12 May 2022 - KWJ - vent ID 39</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.39.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.39.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.39.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication - System Event ID 39</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.System.Event.ID.40.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication - System Event ID 40</Name>
          <Description>Created 12 May 2022 - KWJ - Event ID 40</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.40.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.40.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.40.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication - System Event ID 40</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.System.Event.ID.41.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication - System Event ID 41</Name>
          <Description>Created 4 Nov 2020 - KWJ - Event ID 41</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.41.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.41.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.System.Event.ID.41.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication - System Event ID 41</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.CA.System.Event.ID.39.Alert.Rule">
          <Name>Proactive CA Kerberos Authentication - System Event ID 39</Name>
          <Description>Created 12 May 2022 - KWJ - vent ID 39</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.39.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.39.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.39.Alert.Rule.AlertMessage">
          <Name>Proactive CA Kerberos Authentication - System Event ID 39</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.CA.System.Event.ID.40.Alert.Rule">
          <Name>Proactive CA Kerberos Authentication - System Event ID 40</Name>
          <Description>Created 12 May 2022 - KWJ - Event ID 40</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.40.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.40.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.40.Alert.Rule.AlertMessage">
          <Name>Proactive CA Kerberos Authentication - System Event ID 40</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.CA.System.Event.ID.41.Alert.Rule">
          <Name>Proactive CA Kerberos Authentication - System Event ID 41</Name>
          <Description>Created 4 Nov 2020 - KWJ - Event ID 41</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.41.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.41.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.CA.System.Event.ID.41.Alert.Rule.AlertMessage">
          <Name>Proactive CA Kerberos Authentication - System Event ID 41</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule">
          <Name>Proactive DC Kerberos Security Event Log alert rule</Name>
          <Description>Created 12 May 2022 - KWJ - Microsoft-Windows-Kerberos/Operational Event Log</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.SecurityKerberos.EventLog.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Security Event Log alert</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule">
          <Name>Proactive Server Kerberos Security Event Log alert rule</Name>
          <Description>Created 12 May 2022 - KWJ - Microsoft-Windows-Kerberos/Operational Event Log</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.Server.SecurityKerberos.EventLog.Alert.Rule.AlertMessage">
          <Name>Proactive Server Kerberos Security Event Log alert</Name>
          <Description>{0}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Report.Script.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication Report Script Alert Rule Triggered</Name>
          <Description>{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Event.ID.700.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication Event ID 700 Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Event.ID.700.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication Event ID 700 Alert Rule Triggered</Name>
          <Description>{0}</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.DC.Kdcsvc.Event.ID.701.Report.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Event ID 700 DC Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Event.ID.701.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Event ID 701 DC Report Script Alert Rule Triggered</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Summary.Report.MS.Script.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication Summary Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Summary.Report.MS.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication Summary Report Script Alert Rule Triggered</Name>
          <Description>Proactive DC Kerberos Authentication Summary Report Script Alert Rule

Daily Report for NetLogon events

Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}
</Description>
        </DisplayString>		
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Summary.700.Report.MS.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Sessions Summary 700 Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.Summary.700.Report.MS.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Sessions Summary 700 Report Script Alert Rule Triggered</Name>
          <Description>Proactive DC NetLogon Sessions Summary 700 Report Script Alert Rule
		  
Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}

</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule">
          <Name>Proactive DC Kerberos Authentication Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DC Kerberos Authentication Report Script Task Alert</Name>
          <Description>Proactive DC Kerberos Authentication Alert Report Script Task

Daily Report for NetLogon events

Event Description: 
{0}
</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.Kdcsvc.Allowed.Sessions.Report.Task">
          <Name>Proactive DC Kerberos Authentication Report Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kdcsvc.Allowed.Sessions.701.Report.Task">
          <Name>Proactive DC Kerberos Authentication Event ID 701 Report Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.Kerberos.KDC.Authentications.701.Alerts.Report.DC.Script.Task">
          <Name>Proactive DC NetLogon Session Event ID 701 Alert Report Task</Name>
        </DisplayString>		


      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>