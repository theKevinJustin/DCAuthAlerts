<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.DC.NetLogon.Allowed.Sessions</ID>
      <Version>1.0.3.1</Version>
    </Identity>
    <Name>Proactive DC NetLogon Allowed Sessions</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.DC.NetLogon.Session.Report.MS.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:45</Start>
                        <End>05:05</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.NetLogon.Session.Report.MS.Script.Rule.Datasource.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.Report.MS.Script.Rule.Datasource.v1031.ps1"
$EventID = "558"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
$Alert27 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5827" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert28 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5828" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert29 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5829" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert30 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5830" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert31 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5831" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert27.Count + $Alert28.Count + $Alert29.Count + $Alert30.Count + $Alert31.Count
$Test

$Denied27 = @()
$Denied28 = @()
$Offenders29 = @()
$Offenders30 = @()
$Offenders31 = @()

#=======================================
# From DC for 5827 EventID

if ( $Alert27.Count -gt 0 )
{
	foreach ($LLine in $Alert27)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied27 += $LLineSplit2[0]
		}
	}

#$Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied27 = $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied27 = $Denied27 | sort -uniq | out-string

$Denied27
}


#=======================================
# From DC for 5828 EventID

if ( $Alert28.Count -gt 0 )
{
	foreach ($LLine in $Alert28)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied28 += $LLineSplit2[0]
		}
	}

#$Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied28 = $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied28 = $Denied28 | sort -uniq | out-string

$Denied28
}


#=======================================
# From DC for 5829 EventID

if ( $Alert29.Count -gt 0 )
{
	foreach ($LLine in $Alert29)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders29 += $LLineSplit2[0]
		}
	}

#$Offenders29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders29 = $Offenders29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders29 = $Offenders29 | sort -uniq | out-string

$Offenders29
}


#=======================================
# From DC for 5830 EventID

if ( $Alert30.Count -gt 0 )
{
	foreach ($LLine in $Alert30)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders30 += $LLineSplit2[0]
		}
	}

#$Offenders30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders30 = $Offenders30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders30 = $Offenders30 | sort -uniq | out-string

$Offenders30
}


#=======================================
# From DC for 5831 EventID

if ( $Alert31.Count -gt 0 )
{
	foreach ($LLine in $Alert31)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Offenders31 += $LLineSplit2[0]
		}
	}

#$Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31 | sort -uniq | out-string

$Offenders31
}

#=======================================

$DCNLAMessage = @()
$DCNLAMessage += ""
$DCNLAMessage += $Message
$DCNLAMessage += ""
$DCNLAMessage += "Alert Count = $Test "
$DCNLAMessage += ""
$DCNLAMessage += "# Denied NetLogon Sessions - Event ID's 5827 and 5828 "
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Denied27
$DCNLAMessage += $Denied28
$DCNLAMessage += ""
$DCNLAMessage += "# Allowed NetLogon sessions - Event ID's 5829,5830,5831"
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Offenders29
$DCNLAMessage += $Offenders30
$DCNLAMessage += $Offenders31
$DCNLAMessage += "#============================================================"
$DCNLAMessage += ""
$DCNLAMessage += ""

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCNLAMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.DC.NetLogon.Session.558.Report.MS.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:50</Start>
                        <End>05:05</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.NetLogon.Session.558.Report.MS.Script.Rule.Datasource.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.558.Report.MS.Script.Rule.Datasource.v1031.ps1"
$EventID = "558"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
# Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered
#$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 558 Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
#$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert59 = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters

#$Alert = $Alert.Parameters
$Alert = $Alert |sort -uniq | out-string
$Alert59 = $Alert59 |sort -uniq | out-string

$Alert  
$Alert59

$Alerts = $Alert + $Alert59
$Alerts

$Test = $Alert.Count + $Alert59.Count
$Test


if ( $Test -eq "0" )
{
	$Result = "GOOD"
    
	$DCNLAMessage = @()
	$DCNLAMessage += ""
	$DCNLAMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCNLAMessage += ""

	$DCNLAMessage

	$DCNLAMessage = $DCNLAMessage | out-string

	$Message = "Zero NetLogon sessions for ($date)"
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCNLAMessage)

}



if ( $Test -gt "0" )
{
#=======================================

$DCNLAMessage = @()
$DCNLAMessage += ""
$DCNLAMessage += $Message
#$DCNLAMessage += ""
#$DCNLAMessage += "Alert Count = $Test "
$DCNLAMessage += ""
$DCNLAMessage += "# DC NetLogon sessions for past 24 hours"
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Alerts
$DCNLAMessage += "#============================================================"
$DCNLAMessage += ""
$DCNLAMessage += ""

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

# Clean up DC alerts
get-scomalert -name "Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert
get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCNLAMessage)

}


# Return all bags
$bag
  
#=================================================================================
# End MAIN script section

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
	  <DataSourceModuleType ID="Proactive.DC.NetLogon.Session.Alerts.Report.DC.Script.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>04:05</Start>
                        <End>04:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.DC.NetLogon.Session.Alerts.Report.DC.Script.Datasource.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.Alerts.Report.DC.Script.Datasource.v1031.ps1"
$EventID = "558"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

$DC =  $env:ComputerName

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
#
#$Alert27 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5827" } ).Message
#$Alert28 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5828" } ).Message
#$Alert29 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5829" } ).Message
#$Alert30 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5830" } ).Message
#$Alert31 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5831" } ).Message

$Alert27 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5827';}
$Alert28 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5828';}
$Alert29 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5829';}
$Alert30 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5830';}
$Alert31 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5831';}

$Auths27 =  $Alert27
$Auths28 =  $Alert28
$Auths29 =  $Alert29
$Auths30 =  $Alert30
$Auths31 =  $Alert31

$Test = $Alert27.Count + $Alert28.Count + $Alert29.Count + $Alert30.Count + $Alert31.Count
$Test

if ( $Test -eq "0" )
{
	$Result = "GOOD"
    
	$DCNLAMessage = @()
	$DCNLAMessage += ""
	$DCNLAMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCNLAMessage += ""

	$DCNLAMessage

	$DCNLAMessage = $DCNLAMessage | out-string

	$Message = "Zero NetLogon sessions for ($date)"
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

	$bag.AddValue('Result',$Result)
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$DCNLAMessage)

}


#
# True analysis here
if ( $Test -gt 0 )
	{
	# Create Table for alerts
	
	$Table = @()
	$Table = $null

	$Table = New-Object System.Data.DataTable "NetLogonAlerts"
	$Col1 = New-Object System.Data.DataColumn Event
	$Col2 = New-Object System.Data.DataColumn Count
	$Col3 = New-Object System.Data.DataColumn Device
	$Col4 = New-Object System.Data.DataColumn DomainController
	$Table.Columns.Add($Col1)
	$Table.Columns.Add($Col2)
	$Table.Columns.Add($Col3)
	$Table.Columns.Add($Col4)


#=======================================
# From DC for 5827 EventID

# $Auths27 = $Alert27
# $Auths27.Count

#if ( $Alert27.Count -gt 0 )
#{
#	$Alerts27 = $Alert27 | sort -uniq
#	foreach ($LLine in $Alerts27)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied27 += $LLineSplit2[0]
#		}
#	}

# From $Alert27 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5827';}

# Create Denied array
$Denied27 = @()


if ( $Alert27.Count -gt 0 )
	{
	foreach ($LLine in $Alert27)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied27 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied27 = $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied27 = $Denied27 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device27 = $Denied27
	
	# Update Denied with unique offenders
	$Denied27 = $Denied27 | Sort-Object -Unique | Out-String
	
	$Denied27


	# Parse offenders for counts
	foreach ($Device in $Device27)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5827 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount27 = $($Device27 | select-string -pattern $Device).Count
		$AuthCount27
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5827"
		$row.Count = $AuthCount27
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5828 EventID

$Auths28 = $Alert28
#$Auths28.Count

#if ( $Alert28.Count -gt 0 )
#{
#	$Alerts28 = $Alert28 | sort -uniq
#	foreach ($LLine in $Alerts28)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied28 += $LLineSplit2[0]
#		}
#	}

# From $Alert28 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5828';}

# Create Denied array
$Denied28 = @()


if ( $Alert28.Count -gt 0 )
	{
	foreach ($LLine in $Alert28)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied28 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied28 = $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied28 = $Denied28 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device28 = $Denied28
	
	# Update Denied with unique offenders
	$Denied28 = $Denied28 | Sort-Object -Unique | Out-String
	
	$Denied28


	# Parse offenders for counts
	foreach ($Device in $Device28)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5828 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount28 = $($Device28 | select-string -pattern $Device).Count
		$AuthCount28
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5828"
		$row.Count = $AuthCount28
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5829 EventID

$Auths29 = $Alert29
#$Auths29.Count

#if ( $Alert29.Count -gt 0 )
#{
#	$Alerts29 = $Alert29 | sort -uniq
#	foreach ($LLine in $Alerts29)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied29 += $LLineSplit2[0]
#		}
#	}

# From $Alert29 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5829';}

# Create Denied array
$Denied29 = @()


if ( $Alert29.Count -gt 0 )
	{
	foreach ($LLine in $Alert29)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied29 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied29 = $Denied29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied29 = $Denied29 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device29 = $Denied29
	
	# Update Denied with unique offenders
	$Denied29 = $Denied29 | Sort-Object -Unique | Out-String
	
	$Denied29


	# Parse offenders for counts
	foreach ($Device in $Device29)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5829 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount29 = $($Device29 | select-string -pattern $Device).Count
		$AuthCount29
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5829"
		$row.Count = $AuthCount29
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5830 EventID

$Auths30 = $Alert30
#$Auths30.Count

#if ( $Alert30.Count -gt 0 )
#{
#	$Alerts30 = $Alert30 | sort -uniq
#	foreach ($LLine in $Alerts30)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied30 += $LLineSplit2[0]
#		}
#	}

# From $Alert30 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5830';}

# Create Denied array
$Denied30 = @()


if ( $Alert30.Count -gt 0 )
	{
	foreach ($LLine in $Alert30)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied30 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied30 = $Denied30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied30 = $Denied30 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device30 = $Denied30
	
	# Update Denied with unique offenders
	$Denied30 = $Denied30 | Sort-Object -Unique | Out-String
	
	$Denied30


	# Parse offenders for counts
	foreach ($Device in $Device30)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5830 alert Count =" $Auths30.Count
		$Device
	
		$AuthCount30 = $($Device30 | select-string -pattern $Device).Count
		$AuthCount30
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5830"
		$row.Count = $AuthCount30
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5831 EventID

$Auths31 = $Alert31
#$Auths31.Count

#if ( $Alert31.Count -gt 0 )
#{
#	$Alerts31 = $Alert31 | sort -uniq
#	foreach ($LLine in $Alerts31)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied31 += $LLineSplit2[0]
#		}
#	}

# From $Alert31 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5831';}

# Create Denied array
$Denied31 = @()


if ( $Alert31.Count -gt 0 )
	{
	foreach ($LLine in $Alert31)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied31 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied31 = $Denied31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied31 = $Denied31 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device31 = $Denied31
	
	# Update Denied with unique offenders
	$Denied31 = $Denied31 | Sort-Object -Unique | Out-String
	
	$Denied31


	# Parse offenders for counts
	foreach ($Device in $Device31)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5831 alert Count =" $Auths30.Count
		$Device
	
		$AuthCount31 = $($Device31 | select-string -pattern $Device).Count
		$AuthCount31
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5831"
		$row.Count = $AuthCount31
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}

#=======================================

$DCNLAMessage = @()
#$DCNLAMessage += $Message
#$DCNLAMessage += "#"
$DCNLAMessage += $Table
$DCNLAMessage += "#"

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string


#============================================================

  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$DCNLAMessage)

  # Return all bags
  $bag

# End initial loop
}



#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <ConditionDetectionModuleType ID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5827ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5828ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5829ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5830ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5831ThenMapCD" Accessibility="Internal" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
					<PropertyXPathQuery>Params/Param[1]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[2]</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[4]</PropertyXPathQuery>
					<PropertyXPathQuery>Params/Param[5]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>3600</Interval>
                      <!-- set the time windows to look for events in seconds -->					  
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
              <ConditionDetection ID="EventMapper" TypeID="System!System.Event.GenericDataMapper">
                <EventOriginId>$Target/Id$</EventOriginId>
                <PublisherId>$MPElement$</PublisherId>
                <PublisherName>$Data/Context/DataItem/PublisherName$</PublisherName>
                <Channel>$Data/Context/DataItem/Channel$</Channel>
                <LoggingComputer>$Data/Context/DataItem/LoggingComputer$</LoggingComputer>
                <EventNumber>$Data/Context/DataItem/EventNumber$</EventNumber>
                <EventCategory>$Data/Context/DataItem/EventCategory$</EventCategory>
                <EventLevel>$Data/Context/DataItem/EventLevel$</EventLevel>
                <UserName />
				<Description>$Data/Context/DataItem/EventDescription$</Description>
                <Params />
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="EventMapper">
                <Node ID="Consolidate" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Event.Data</OutputType>
        <InputTypes>
          <InputType>Windows!Microsoft.Windows.EventData</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>

      <WriteActionModuleType ID="Proactive.DC.NetLogon.Session.Alerts.Report.MS.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.NetLogon.Session.Alerts.Report.MS.Script.WA.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.Alerts.Report.MS.Script.WA.v1031.ps1"
$EventID = "559"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
$Alert27 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5827" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert28 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5828" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert29 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5829" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert30 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5830" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert31 = $(get-scomalert -name "Proactive DC NetLogon unsecure session allowed - System Event ID 5831" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert27.Count + $Alert28.Count + $Alert29.Count + $Alert30.Count + $Alert31.Count
$Test

if ( $Test -gt "0" )
{
# Create arrays
$Denied27 = @()
$Denied28 = @()
$Offenders29 = @()
$Offenders30 = @()
$Offenders31 = @()

#=======================================
# From DC for 5827 EventID

if ( $Alert27.Count -gt 0 )
{
	$Alerts27 = $Alert27 | sort -uniq
	foreach ($LLine in $Alerts27)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Denied27 += $LLineSplit2[0]
		}
	}

#$Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied27 = $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
$Denied27 = $Denied27 | sort -uniq | out-string

$Denied27
}


#=======================================
# From DC for 5828 EventID

if ( $Alert28.Count -gt 0 )
{
	$Alerts28 = $Alert28 | sort -uniq
	foreach ($LLine in $Alerts28)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Denied28 += $LLineSplit2[0]
		}
	}

#$Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied28 = $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Denied28 = $Denied28 | sort -uniq | out-string

$Denied28
}


#=======================================
# From DC for 5829 EventID

if ( $Alert29.Count -gt 0 )
{
	$Alerts29 = $Alert29 | sort -uniq
	foreach ($LLine in $Alerts29)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders29 += $LLineSplit2[0]
		}
	}

#$Offenders29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders29 = $Offenders29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders29 = $Offenders29 | sort -uniq | out-string

$Offenders29
}


#=======================================
# From DC for 5830 EventID

if ( $Alert30.Count -gt 0 )
{
	$Alerts30 = $Alert30 | sort -uniq
	foreach ($LLine in $Alerts30)
	{
	$Lmatch = $LLine |select-string -pattern ':'
	if ($Lmatch)
		{
		#$Lmatch
		$LLineSplit = $LLine.Split(":")
		#$LLineSplit
		#$LLineSplit[1]; $LLineSplit[2]
		#$LLineSplit[3]
		$LLineSplit2 = $LLineSplit[3].Split("Domain")
		#$LLineSplit2[0]
		$Offenders30 += $LLineSplit2[0]
		}
	}

#$Offenders30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders30 = $Offenders30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders30 = $Offenders30 | sort -uniq | out-string

$Offenders30
}


#=======================================
# From DC for 5831 EventID

if ( $Alert31.Count -gt 0 )
{
	$Alerts31 = $Alert31 | sort -uniq
	foreach ($LLine in $Alerts31)
	{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
		{
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[3]
			$LLineSplit2 = $LLineSplit[3].Split("Domain")
			#$LLineSplit2[0]
			$Offenders31 += $LLineSplit2[0]
		}
	}

#$Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
$Offenders31 = $Offenders31 | sort -uniq | out-string

$Offenders31
}

#=======================================

$DCNLAMessage = @()
$DCNLAMessage += ""
$DCNLAMessage += $Message
#$DCNLAMessage += ""
#$DCNLAMessage += "Alert Count = $Test "
$DCNLAMessage += ""
$DCNLAMessage += "# Denied NetLogon Sessions - Event ID's 5827 and 5828 "
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Denied27
$DCNLAMessage += $Denied28
$DCNLAMessage += ""
$DCNLAMessage += "# Allowed NetLogon sessions - Event ID's 5829,5830,5831"
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Offenders29
$DCNLAMessage += $Offenders30
$DCNLAMessage += $Offenders31
$DCNLAMessage += "#============================================================"
$DCNLAMessage += ""
$DCNLAMessage += ""

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCNLAMessage)


# Return all bags
$bag
}


if ( $Test -eq "0" )
{
	$DCNLAMessage = @()
	$DCNLAMessage += ""
	$DCNLAMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCNLAMessage += ""

	$DCNLAMessage

	$DCNLAMessage = $DCNLAMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

}

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DC.NetLogon.Session.559.Alerts.Report.MS.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.NetLogon.Session.559.Alerts.Report.MS.Script.WA.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.559.Alerts.Report.MS.Script.WA.v1031.ps1"
$EventID = "559"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
# Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered
#$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 558 Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
#$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } ).Parameters
$Alert59 = $(get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } ).Parameters

$Test = $Alert.Count + $Alert59.Count

#$Alert = $Alert.Parameters
$Alert = $Alert |sort -uniq | out-string
$Alert59 = $Alert59 |sort -uniq | out-string

$Alert  
$Alert59

$Alerts = $Alert + $Alert59

$Test


if ( $Test -eq "0" )
{
	$DCNLAMessage = @()
	$DCNLAMessage += ""
	$DCNLAMessage += "# ZERO NetLogon sessions for past 24 hours"
	$DCNLAMessage += ""

	$DCNLAMessage

	$DCNLAMessage = $DCNLAMessage | out-string

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# ZERO NetLogon sessions for ($date).")

}


if ( $Test -gt "0" )
{
#=======================================

$DCNLAMessage = @()
$DCNLAMessage += ""
$DCNLAMessage += $Message
#$DCNLAMessage += ""
#$DCNLAMessage += "Alert Count = $Test "
$DCNLAMessage += ""
$DCNLAMessage += "# DC NetLogon sessions for past 24 hours"
$DCNLAMessage += "#============================================================"
$DCNLAMessage += $Alerts
$DCNLAMessage += "#============================================================"
$DCNLAMessage += ""
$DCNLAMessage += ""

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string

#============================================================


  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

# Clean up DC alerts
get-scomalert -name "Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert
get-scomalert -name "Proactive DC NetLogon Allowed Sessions Event ID 55*" | ? { $_.TimeRaised -gt $Time } | resolve-scomalert

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$DCNLAMessage)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
}


  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")

#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Alert.WA.v1031.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC NetLogon Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Alert.WA.v1031.ps1"
$EventID = "559"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$Message = "Daily Server DC NetLogons report for ($date)"
  
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
#===============================================
# DC NetLogons
#===============================================

# DC event powershell
$Time = [DateTime](Get-Date).AddDays(-1)

$DC =  $env:ComputerName

# Test event parsing
#$Alert = (get-eventlog -LogName "System" -Source "NETLOGON" | ? { $_.EventID -eq "5823" }).Message
#
#$Alert27 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5827" } ).Message
#$Alert28 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5828" } ).Message
#$Alert29 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5829" } ).Message
#$Alert30 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5830" } ).Message
#$Alert31 = $(get-eventlog -LogName "System" -Source "NETLOGON" -after $Time | ? { $_.EventID -eq "5831" } ).Message

$Alert27 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5827';}
$Alert28 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5828';}
$Alert29 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5829';}
$Alert30 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5830';}
$Alert31 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5831';}

$Auths27 =  $Alert27
$Auths28 =  $Alert28
$Auths29 =  $Alert29
$Auths30 =  $Alert30
$Auths31 =  $Alert31

$Test = $Alert27.Count + $Alert28.Count + $Alert29.Count + $Alert30.Count + $Alert31.Count
$Test

if ( $Test -eq "0" )
{
	$Result = "GOOD"
    
	$DCNLAMessage = @()
	$DCNLAMessage += ""
	$DCNLAMessage += "# Zero NetLogon sessions for past 24 hours"
	$DCNLAMessage += ""

	$DCNLAMessage

	$DCNLAMessage = $DCNLAMessage | out-string

	$Message = "Zero NetLogon sessions for ($date)"
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Zero NetLogon sessions for ($date).")

	$bag.AddValue('Result',$Result)
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$DCNLAMessage)

}


#
# True analysis here
if ( $Test -gt 0 )
	{
	# Create Table for alerts
	
	$Table = @()
	$Table = $null

	$Table = New-Object System.Data.DataTable "NetLogonAlerts"
	$Col1 = New-Object System.Data.DataColumn Event
	$Col2 = New-Object System.Data.DataColumn Count
	$Col3 = New-Object System.Data.DataColumn Device
	$Col4 = New-Object System.Data.DataColumn DomainController
	$Table.Columns.Add($Col1)
	$Table.Columns.Add($Col2)
	$Table.Columns.Add($Col3)
	$Table.Columns.Add($Col4)


#=======================================
# From DC for 5827 EventID

# $Auths27 = $Alert27
# $Auths27.Count

#if ( $Alert27.Count -gt 0 )
#{
#	$Alerts27 = $Alert27 | sort -uniq
#	foreach ($LLine in $Alerts27)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied27 += $LLineSplit2[0]
#		}
#	}

# From $Alert27 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5827';}

# Create Denied array
$Denied27 = @()


if ( $Alert27.Count -gt 0 )
	{
	foreach ($LLine in $Alert27)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied27 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied27 = $Denied27.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied27 = $Denied27 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device27 = $Denied27
	
	# Update Denied with unique offenders
	$Denied27 = $Denied27 | Sort-Object -Unique | Out-String
	
	$Denied27


	# Parse offenders for counts
	foreach ($Device in $Device27)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5827 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount27 = $($Device27 | select-string -pattern $Device).Count
		$AuthCount27
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5827"
		$row.Count = $AuthCount27
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5828 EventID

$Auths28 = $Alert28
#$Auths28.Count

#if ( $Alert28.Count -gt 0 )
#{
#	$Alerts28 = $Alert28 | sort -uniq
#	foreach ($LLine in $Alerts28)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied28 += $LLineSplit2[0]
#		}
#	}

# From $Alert28 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5828';}

# Create Denied array
$Denied28 = @()


if ( $Alert28.Count -gt 0 )
	{
	foreach ($LLine in $Alert28)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied28 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied28 = $Denied28.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied28 = $Denied28 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device28 = $Denied28
	
	# Update Denied with unique offenders
	$Denied28 = $Denied28 | Sort-Object -Unique | Out-String
	
	$Denied28


	# Parse offenders for counts
	foreach ($Device in $Device28)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5828 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount28 = $($Device28 | select-string -pattern $Device).Count
		$AuthCount28
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5828"
		$row.Count = $AuthCount28
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5829 EventID

$Auths29 = $Alert29
#$Auths29.Count

#if ( $Alert29.Count -gt 0 )
#{
#	$Alerts29 = $Alert29 | sort -uniq
#	foreach ($LLine in $Alerts29)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied29 += $LLineSplit2[0]
#		}
#	}

# From $Alert29 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5829';}

# Create Denied array
$Denied29 = @()


if ( $Alert29.Count -gt 0 )
	{
	foreach ($LLine in $Alert29)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied29 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied29 = $Denied29.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied29 = $Denied29 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device29 = $Denied29
	
	# Update Denied with unique offenders
	$Denied29 = $Denied29 | Sort-Object -Unique | Out-String
	
	$Denied29


	# Parse offenders for counts
	foreach ($Device in $Device29)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5829 alert Count =" $Auths28.Count
		$Device
	
		$AuthCount29 = $($Device29 | select-string -pattern $Device).Count
		$AuthCount29
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5829"
		$row.Count = $AuthCount29
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5830 EventID

$Auths30 = $Alert30
#$Auths30.Count

#if ( $Alert30.Count -gt 0 )
#{
#	$Alerts30 = $Alert30 | sort -uniq
#	foreach ($LLine in $Alerts30)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied30 += $LLineSplit2[0]
#		}
#	}

# From $Alert30 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5830';}

# Create Denied array
$Denied30 = @()


if ( $Alert30.Count -gt 0 )
	{
	foreach ($LLine in $Alert30)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied30 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied30 = $Denied30.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied30 = $Denied30 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device30 = $Denied30
	
	# Update Denied with unique offenders
	$Denied30 = $Denied30 | Sort-Object -Unique | Out-String
	
	$Denied30


	# Parse offenders for counts
	foreach ($Device in $Device30)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5830 alert Count =" $Auths30.Count
		$Device
	
		$AuthCount30 = $($Device30 | select-string -pattern $Device).Count
		$AuthCount30
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5830"
		$row.Count = $AuthCount30
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}


#=======================================
# From DC for 5831 EventID

$Auths31 = $Alert31
#$Auths31.Count

#if ( $Alert31.Count -gt 0 )
#{
#	$Alerts31 = $Alert31 | sort -uniq
#	foreach ($LLine in $Alerts31)
#	{
#		$Lmatch = $LLine |select-string -pattern ':'
#		if ($Lmatch)
#		{
#			#$Lmatch
#			$LLineSplit = $LLine.Split(":")
#			#$LLineSplit
#			#$LLineSplit[1]; $LLineSplit[2]
#			#$LLineSplit[3]
#			$LLineSplit2 = $LLineSplit[3].Split("Domain")
#			#$LLineSplit2[0]
#			$Denied31 += $LLineSplit2[0]
#		}
#	}

# From $Alert31 = Get-WinEvent -FilterHashtable @{LogName='System'; ID='5831';}

# Create Denied array
$Denied31 = @()


if ( $Alert31.Count -gt 0 )
	{
	foreach ($LLine in $Alert31)
		{
		$LMatch = $LLine
		if ($Lmatch)
			{
			$Denied31 += $LMatch.Message.Split(":")[1].split("")[1]
			}
		}	

	# $Denied31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries)
	# $Denied31 = $Denied31.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq | out-string
	# $Denied31 = $Denied31 | sort -uniq | out-string
	
	# Duplicate Denied for all offenders, even repeats
	$Device31 = $Denied31
	
	# Update Denied with unique offenders
	$Denied31 = $Denied31 | Sort-Object -Unique | Out-String
	
	$Denied31


	# Parse offenders for counts
	foreach ($Device in $Device31)
	{
		# Identify each offender by count
		#$StartTime = Get-Date
	
		write-host "5831 alert Count =" $Auths30.Count
		$Device
	
		$AuthCount31 = $($Device31 | select-string -pattern $Device).Count
		$AuthCount31
		write-host ""
	
		#$EndTime = Get-Date
		#$ScriptTime = ($EndTime - $StartTime).TotalSeconds
		#$ScriptTime
	
		# Add to Table	
		$row = $Table.NewRow()
		$row.Event = "5831"
		$row.Count = $AuthCount31
		$row.Device = $Device
		$row.DomainController = $DC
		$Table.Rows.Add($row)
	}

}

#=======================================

$DCNLAMessage = @()
#$DCNLAMessage += $Message
#$DCNLAMessage += "#"
$DCNLAMessage += $Table
$DCNLAMessage += "#"

$DCNLAMessage

$DCNLAMessage = $DCNLAMessage | out-string


#============================================================

  $Result = "GOOD"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of DC NetLogons for ($date). `n `n$DCNLAMessage`n")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$DCNLAMessage)

  # Return all bags
  $bag

# End initial loop
}



#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Proactive.System.Event.ID.5827.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5827</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NETLOGON</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5827ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.System.Event.ID.5827.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.System.Event.ID.5828.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5828</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NETLOGON</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5828ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.System.Event.ID.5828.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

      <Rule ID="Proactive.System.Event.ID.5829.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5829</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NETLOGON</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5829ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.System.Event.ID.5829.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
			</AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.System.Event.ID.5830.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5830</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NETLOGON</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5830ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.System.Event.ID.5830.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.System.Event.ID.5831.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5831</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NETLOGON</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
		<ConditionDetection ID="CD" TypeID="Proactive.DC.NetLogon.CollectConsolidatedEvent.Consolidate5831ThenMapCD" />
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.System.Event.ID.5831.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>			  
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

	  <Rule ID="Proactive.DC.NetLogon.Event.ID.558.Alert.Rule" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
  				  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">558</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC NetLogons report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Event.ID.558.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>			  
            </AlertParameters>
          </WriteAction>
		  <WriteAction ID="CollectEventDWDB" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData"/>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.NetLogon.Event.ID.559.Report.Script.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">559</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC NetLogons report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Event.ID.559.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
		  <WriteAction ID="CollectEventDWDB" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData"/>		  
        </WriteActions>
      </Rule>

      <Rule ID="Proactive.DC.NetLogon.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">559</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server DC NetLogons report for </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
	
      <Rule ID="Proactive.DC.NetLogon.Sessions.Report.Script.Alert.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.NetLogon.Session.Alerts.Report.DC.Script.Rule.Datasource">
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Sessions.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>	  
      <Rule ID="Proactive.DC.NetLogon.Sessions.Summary.Report.MS.Script.Alert.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.NetLogon.Session.Report.MS.Script.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Sessions.Summary.Report.MS.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DC.NetLogon.Sessions.Summary.558.Report.MS.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.DC.NetLogon.Session.558.Report.MS.Script.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.DC.NetLogon.Sessions.Summary.558.Report.MS.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.DC.NetLogon.Allowed.Sessions.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="360" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.NetLogon.Session.Alerts.Report.MS.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DC.NetLogon.Allowed.Sessions.559.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="360" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.NetLogon.Session.559.Alerts.Report.MS.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Task" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Alert.WA">
          <TimeoutSeconds>120</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Proactive.System.Event.ID.5827.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.System.Event.ID.5828.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.System.Event.ID.5829.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.System.Event.ID.5830.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.System.Event.ID.5831.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Sessions.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Event.ID.558.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Event.ID.559.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Sessions.Summary.Report.MS.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DC.NetLogon.Sessions.Summary.558.Report.MS.Script.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.DC.NetLogon.Allowed.Sessions">
          <Name>Proactive DC NetLogon Allowed Sessions</Name>
          <Description>
v1.0.3.1 18 Jul 2023 Updated reports to informational
v1.0.0.0  4 Nov 2020 Created Netlogon System Events mgmt pack</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.System.Event.ID.5827.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5827.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5827.Alert.Rule">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5827</Name>
          <Description>Created 10 Nov 2020 - KWJ - Event ID 5827</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5827.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5827</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.System.Event.ID.5828.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5828.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5828.Alert.Rule">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5828</Name>
          <Description>Created 10 Nov 2020 - KWJ - Event ID 5828</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5828.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5828</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.System.Event.ID.5829.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5829.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5829.Alert.Rule">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5829</Name>
          <Description>Created 4 Nov 2020 - KWJ - Event ID 5829</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5829.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5829</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.System.Event.ID.5830.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5830.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5830.Alert.Rule">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5830</Name>
          <Description>Created 4 Nov 2020 - KWJ - Event ID 5830</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5830.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5830</Name>
          <Description>{0}</Description>
        </DisplayString>
        
        <DisplayString ElementID="Proactive.System.Event.ID.5831.Alert.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5831.Alert.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.System.Event.ID.5831.Alert.Rule">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5831</Name>
          <Description>Created 4 Nov 2020 - KWJ - Event ID 5831</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.System.Event.ID.5831.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon unsecure session allowed - System Event ID 5831</Name>
          <Description>{0}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Report.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Allowed Sessions Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Allowed Sessions Report Script Alert Rule Triggered</Name>
          <Description>{2}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.NetLogon.Event.ID.558.Alert.Rule">
          <Name>Proactive DC NetLogon Allowed Sessions Event ID 558 Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Event.ID.558.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Allowed Sessions Event ID 558 Alert Rule Triggered</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.NetLogon.Allowed.Sessions.Report.Task">
          <Name>Proactive DC NetLogon Allowed Sessions Report Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Allowed.Sessions.559.Report.Task">
          <Name>Proactive DC NetLogon Allowed Sessions Event ID 559 Report Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Session.559.Alerts.Report.DC.Script.Task">
          <Name>Proactive DC NetLogon Session Event ID 559 Alert Report Task</Name>
        </DisplayString>		
        <DisplayString ElementID="Proactive.DC.NetLogon.Event.ID.559.Report.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Event ID 558 DC Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Event.ID.559.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Event ID 559 DC Report Script Alert Rule Triggered</Name>
          <Description>{0}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Summary.Report.MS.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Allowed Sessions Summary Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Summary.Report.MS.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Allowed Sessions Summary Report Script Alert Rule Triggered</Name>
          <Description>Proactive DC NetLogon Allowed Sessions Summary Report Script Alert Rule

Daily Report for NetLogon events

Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}
</Description>
        </DisplayString>		

        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Summary.558.Report.MS.Script.Alert.Rule">
          <Name>Proactive DC NetLogon Sessions Summary 558 Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Sessions.Summary.558.Report.MS.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Sessions Summary 558 Report Script Alert Rule Triggered</Name>
          <Description>Proactive DC NetLogon Sessions Summary 558 Report Script Alert Rule
		  
Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}

</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DC.NetLogon.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule">
          <Name>Proactive DC NetLogon Allowed Sessions Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DC.NetLogon.Allowed.Sessions.Report.MS.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DC NetLogon Allowed Sessions Report Script Task Alert</Name>
          <Description>Proactive DC NetLogon Allowed Sessions Alert Report Script Task

Daily Report for NetLogon events

Event Description: 
{0}
</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>