<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.Microsoft.Windows.DCOM.Server.Security.Bypass</ID>
      <Version>1.0.0.8</Version>
    </Identity>
    <Name>Proactive Microsoft Windows DCOM Server Security Bypass</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSAD6D">
        <ID>Microsoft.Windows.Server.AD.2016.Discovery</ID>
        <Version>10.0.2.2</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWS6D">
        <ID>Microsoft.Windows.Server.2016.Discovery</ID>
        <Version>10.0.8.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:37</Start>
                        <End>06:57</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.DataSource.v1008.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC System EventID's 1003x
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.DataSource.v1008.ps1"
$EventID = "610"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}




# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Windows DCOM Server Bypass DC events report for ($date).")
$DSMessage = "Windows DCOM Server Bypass client events report for ($date)."


$DCOMAlerts = get-scomalert -name "Microsoft Windows DCOM Server Bypass System Event 1003*" 
$DCOMAlerts.Count

$OpenDCOMAlerts = $DCOMAlerts | ? { $_.ResolutionState -ne 255 }
$OpenDCOMAlerts.Count

$UNIQDCOMAlerts = $DCOMAlerts | sort -property Description -uniq 
$LoginsAttempted = ($DCOMAlerts.RepeatCount | Measure-object -sum).Sum

$DCOMAlertMessage = @()

# 
# Set up array for AD Account lockout/expiry report
if ( $DCOMAlerts.Count -gt 0 )
	{
	$DCOMAlertMessage += ""
	$DCOMAlertMessage += $DSMessage
	$DCOMAlertMessage += ""
	$DCOMAlertMessage += "# Since last report run, DCOM Server Bypass System Events = $($OpenDCOMAlerts.Count)"
	$DCOMAlertMessage += "# TOTAL Microsoft Windows DCOM Server Bypass System Events = $($DCOMAlerts.Count)"
	$DCOMAlertMessage += "# Total logins attempted based on logged events = $LoginsAttempted"
	$DCOMAlertMessage += "#================================================================"
	$DCOMAlertMessage += "#  Unique DC's where authentication atttempted"
	$DCOMAlertMessage += "#============================================="
	$DCOMAlertMessage += $DCOMAlerts | sort -property MonitoringObjectName -uniq | ft MonitoringObjectName
	$DCOMAlertMessage += "#================================================================"
	$DCOMAlertMessage += "#  Unique DC's Event Description of SVC, SID, details in event"
	$DCOMAlertMessage += "#============================================================="
	$DCOMAlertMessage += $DCOMAlerts | sort -property Description -uniq | ft Description -auto -wrap
	$DCOMAlertMessage += "#================================================================"
	#$DCOMAlertMessage += "#  Unique date and Times for IP's attempting author"
	#$DCOMAlertMessage += "#=================================================="
	#$DCOMAlertMessage += $DCOMAlerts | sort -property TimeRaised -uniq | ft TimeRaised
	#$DCOMAlertMessage += "#================================================================"
	}

	$DCOMAlertMessage 

	$DCOMAlertMessage = $DCOMAlertMessage | out-string

	$DCOMAlertMessage 

# Log 
$Summary = "$DCOMAlertMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


#Check the value of $Test
$strCondition -eq "Good"

if ( $DCOMAlerts.Count -eq 0 )
	{
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}
if ( $DCOMAlerts.Count -gt 0 )
	{
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}


# Return all bags
$bag


# Cleanup rule alerts
#=================================================================================
# Microsoft Windows DCOM Server Bypass System Event 10036 Rule Alert
$DCOMAlerts | ? { $_.ResolutionState -ne 255 } | Resolve-SCOMAlert -Comment "Closing daily alert flood after report alert created by DCOM pack automation DS" 

# Re-run for flood condition
get-scomalert -name "Microsoft Windows DCOM Server Bypass System Event 1003*" | ? { $_.ResolutionState -ne 255 } | Resolve-SCOMAlert -Comment "Closing daily alert flood after report alert created by DCOM pack automation DS" 

#=================================================================================


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.WA.v1008.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DC System EventID's 10036
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.WA.v1008.ps1"
$EventID = "610"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Windows DCOM Server Bypass events report task for date ($date).")
$DSMessage = "Windows DCOM Server Bypass events report task for date ($date)."


$DCOMAlerts = get-scomalert -name "Microsoft Windows DCOM Server Bypass System Event 1003*" 
$DCOMAlerts.Count

$OpenDCOMAlerts = $DCOMAlerts | ? { $_.ResolutionState -ne 255 }
$OpenDCOMAlerts.Count

$UNIQDCOMAlerts = $DCOMAlerts | sort -property Description -uniq 
$LoginsAttempted = ($DCOMAlerts.RepeatCount | Measure-object -sum).Sum

$DCOMAlertMessage = @()

# 
# Set up array for AD Account lockout/expiry report
if ( $DCOMAlerts.Count -gt 0 )
	{
	$DCOMAlertMessage += ""
	$DCOMAlertMessage += $DSMessage
	$DCOMAlertMessage += ""
	$DCOMAlertMessage += "# Since last report run, DCOM Server Bypass System Events = $($OpenDCOMAlerts.Count)"
	$DCOMAlertMessage += "# TOTAL Microsoft Windows DCOM Server Bypass System Events = $($DCOMAlerts.Count)"
	$DCOMAlertMessage += "# Total logins attempted based on logged events = $LoginsAttempted"
	$DCOMAlertMessage += "#================================================================"
	$DCOMAlertMessage += "#  Unique DC's where authentication atttempted"
	$DCOMAlertMessage += "#============================================="
	$DCOMAlertMessage += $DCOMAlerts | sort -property MonitoringObjectName -uniq | ft MonitoringObjectName
	$DCOMAlertMessage += "#================================================================"
	$DCOMAlertMessage += "#  Unique DC's Event Description of SVC, SID, details in event"
	$DCOMAlertMessage += "#============================================================="
	$DCOMAlertMessage += $DCOMAlerts | sort -property Description -uniq | ft Description -auto -wrap
	$DCOMAlertMessage += "#================================================================"
	#$DCOMAlertMessage += "#  Unique date and Times for IP's attempting author"
	#$DCOMAlertMessage += "#=================================================="
	#$DCOMAlertMessage += $DCOMAlerts | sort -property TimeRaised -uniq | ft TimeRaised
	#$DCOMAlertMessage += "#================================================================"
	}

	$DCOMAlertMessage 

	$DCOMAlertMessage = $DCOMAlertMessage | out-string

	$DCOMAlertMessage 

# Log 
$Summary = "$DCOMAlertMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


#Check the value of $Test
$strCondition -eq "Good"

if ( $DCOMAlerts.Count -eq 0 )
	{
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}
if ( $DCOMAlerts.Count -gt 0 )
	{
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}


# Return all bags
$bag


# Cleanup rule alerts
#=================================================================================
# Microsoft Windows DCOM Server Bypass System Event 10036 Rule Alert
$DCOMAlerts | ? { $_.ResolutionState -ne 255 } | Resolve-SCOMAlert -Comment "Closing daily alert flood after report alert created by DCOM pack automation DS" 

# Re-run for flood condition
get-scomalert -name "Microsoft Windows DCOM Server Bypass System Event 1003*" | ? { $_.ResolutionState -ne 255 } | Resolve-SCOMAlert -Comment "Closing daily alert flood after report alert created by DCOM pack automation DS" 

#=================================================================================


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Alert.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">10036</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>The server-side authentication level policy does not allow the user</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DCOM.Server.Bypass.Client.10037.Alert.Rule" Enabled="true" Target="MWS6D!Microsoft.Windows.Server.10.0.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">10037</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>The lowest activation authentication level required by DCOM</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DCOM.Server.Bypass.Client.10037.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.DCOM.Server.Bypass.Client.10038.Alert.Rule" Enabled="true" Target="MWS6D!Microsoft.Windows.Server.10.0.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">10038</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>The lowest activation authentication level required by DCOM</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DCOM.Server.Bypass.Client.10038.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

      <Rule ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.DataSource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

      <Rule ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">610</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Windows DCOM Server Bypass events report task for date</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="300" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor" Accessibility="Public" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>System</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(10036)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(The server-side authentication level policy does not allow the user)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor" Accessibility="Public" Enabled="false" Target="MWS6D!Microsoft.Windows.Server.10.0.Computer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>System</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(10037|10038)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(The server-side authentication level policy does not allow the user)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.Client.10037.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.Client.10038.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Task.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.Microsoft.Windows.DCOM.Server.Security.Bypass">
          <Name>Proactive Microsoft Windows DCOM Server Security Bypass</Name>
          <Description>
v1.0.0.8  18 Jul 2023 - Updated reports to informational
v1.0.0.7  13 Jun 2023 - updated Task Alert Rule, updated DS momAPI and DSMessage duplicates
v1.0.0.6   8 Jun 2023 - Updated 1003x.Report.DataSource
v1.0.0.4   2 Aug 2022 - Updated Datasources DS,WriteAction WA, Reports
v1.0.0.0  27 Jul 2022 - New pack for DCOM events 10036-10038</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.DataSource">
          <Name>Microsoft Windows DCOM Server Bypass System Event 1003x DataSource</Name>
          <Description>This datasource generates 1003x System Event log synopsis</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.WA">
          <Name>Microsoft Windows DCOM Server Bypass System Event 1003x WA</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Alert.Rule">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10036 Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10036 Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.Client.10037.Alert.Rule">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10037 created Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.Client.10037.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10037 created Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.Client.10038.Alert.Rule">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10038 created Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.Client.10038.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows DCOM Server Bypass System Event 10038 created Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Rule">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event 10036 Report Alert Rule</Name>
          <Description>Microsoft Windows DCOM Server Bypass DC Alert Rule</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Rule.AlertMessage">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event 1003x Report AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Task.Alert.Rule">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event ID 10036 Script Task Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Report.Task.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event ID 1003x Script Task AlertMessage</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.1003x.Task">
          <Name>Microsoft Windows DCOM Server Bypass DC Task</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor">
          <Name>Service Account lockout alerts for System Event ID 10036</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10036.Monitor_AlertMessageResourceID">
          <Name>Service Account lockout alerts for System Event ID 10036</Name>
          <Description>DCOM Server 

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event ID 10037 and 10038 Monitor</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.DCOM.Server.Bypass.DC.10037and10038.Monitor_AlertMessageResourceID">
          <Name>Microsoft Windows DCOM Server Bypass DC System Event ID 10037 and 10038 Monitor</Name>
          <Description>Microsoft Windows DCOM Server Bypass DC System Event ID 10037 and 10038 Monitor

Event Description:
{0}
</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>